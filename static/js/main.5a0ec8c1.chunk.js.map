{"version":3,"sources":["components/ContactForm.js","components/OrderForm.js","components/MenuList.js","containers/App.js","serviceWorker.js","index.js"],"names":["ContactForm","props","state","className","Component","OrderForm","orderItems","this","map","item","index","key","name","description","price","Table","striped","bordered","hover","wide-width","subtotal","href","onClick","submitOrder","MenuList","menuItems","addToCart","removeFromCart","App","bind","setState","items","push","prevState","indexOf","splice","alert","window","location","reload","Fragment","Container","Row","Col","xs","md","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a0ec8c1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col, Grid, Container } from 'react-bootstrap';\n\nclass ContactForm extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    };\n\n  }\n\n\n  render() {\n    return (\n      <section className=\"contact-form\">\n        <h2>Contact Aidan</h2>\n        <ul>\n          <li><p>Email: aidanpierce98@gmail.com</p></li>\n        </ul>\n      </section>\n    )\n  }\n}\n\nexport default ContactForm;\n","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MenuList from './MenuList';\nimport { Row, Col, Grid, Container, Table } from 'react-bootstrap';\n\nclass OrderForm extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    };\n\n  }\n\n\n  render() {\n\n    let orderItems = this.props.orderItems.map((item, index) => (\n    <div key={index}>\n      <tr>\n        <td>\n          <ul>\n            <li className=\"menu-item-name\"><h2>{item.name}</h2></li>\n            <li><p>{item.description}</p></li>\n          </ul>\n        </td>\n        <td><p>${item.price}</p></td>\n      </tr>\n      </div>\n    ));\n\n    return (\n      <section className=\"order-form\">\n        <h2>Order Form</h2>\n        <Table striped bordered hover wide-width>\n          <tbody>\n            {orderItems}\n          </tbody>\n        </Table>\n        <p>Total Price ${this.props.subtotal}.00</p>\n        <a href=\"#\"><button className=\"btn btn-primary sub-btn\" onClick={() => this.props.submitOrder()}>Submit Order</button></a>\n      </section>\n    )\n  }\n}\n\nexport default  OrderForm;\n","import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport OrderForm from './OrderForm';\nimport { Row, Col, Grid, Container, Table } from 'react-bootstrap';\nclass MenuList extends Component {\n\n  // constructor(props) {\n  //   super(props);\n  //\n  //   this.state = {\n  //     name: '',\n  //     description: '',\n  //     price: ''\n  //   };\n  // }\n\n  // addItem(item) {\n  //   // console.log(image);\n  //   let items = [this.state];\n  //   items.push(item);\n  //   this.setState({items: items});\n  //   console.log(items);\n  // }\n\n\n  render() {\n    let menuItems = this.props.menuItems.map((item, index) => (\n      <tr>\n        <td>\n          <ul>\n            <li className=\"menu-item-name\"><h2>{item.name}</h2></li>\n            <li><p>{item.description}</p></li>\n            <li><button className=\"btn btn-success\" onClick={() => this.props.addToCart(item)}>Add To Order</button></li>\n            <li><button className=\"btn btn-danger\" onClick={() => this.props.removeFromCart(item)}>Remove From Order</button></li>\n          </ul>\n        </td>\n        <td><p>${item.price}.00</p></td>\n      </tr>\n    ))\n    return (\n      <section className=\"menu-list\">\n      <Table striped bordered hover>\n        <tbody>\n          {menuItems}\n        </tbody>\n      </Table>\n      </section>\n    )\n  }\n}\n\nexport default  MenuList;\n","import React, {Component} from 'react';\nimport ContactForm from './../components/ContactForm';\nimport MenuList from './../components/MenuList';\nimport OrderForm from './../components/OrderForm';\nimport './App.css';\n\nimport { Row, Col, Grid, Container } from 'react-bootstrap';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      menuItems: [],\n      orderItems: [],\n      subtotal: 0\n    }\n    this.addToCart = this.addToCart.bind(this);\n    this.removeFromCart = this.removeFromCart.bind(this);\n    this.submitOrder = this.submitOrder.bind(this);\n  }\n\n  componentDidMount() {\n    let menuItems = [{name: 'Potato Salad', description: 'Yukon gold potatoes finely chopped and served with imported extra virgin olive oil, irish grassfed butter, mayo, and freshly picked chives and basil', price: 3}, {name: 'Fruit Salad', description: 'A seaonal assortment of our homegrown fruits', price: 5}, {name: 'Bison Filet Mignon', description: '12 ounces of bison filet served with mashed potatoes', price: 28}, {name: 'Rainbow Trout', description: 'Fresh wild caught rainbow trout served with gnocci and brussel sprouts', price: 18}, {name: 'Lobster Sandwich', description: '8 ounces of fresh lobster, caught this morning, served on our homemade sourdough with a generous serving of mayo', price: 14}, {name: 'Turkey On Rye', description: 'Turkey, provolone, mayo, dijon mustard, kale, sliced tomatoes, and raw honey on rye bread', price: 12}, {name: 'BLT Pimento', description: 'Uncured bacon, lettuce, tomato, extra virgin olive oil, grassfed irish butter, and our secret spice blend on sourdough', price: 11}, {name: 'Komboucha', description: 'ginger, berry, or honey flavored', price: 4}, {name: 'Water', description: 'Fiji or Voss', price: 4}, {name: 'Fresh pressed juice', description: 'Seasonal fruits and veggetables juiced fresh to order', price: 6}]\n    this.setState({menuItems: menuItems});\n  }\n\n  addToCart(item) {\n    // here is where you need to add the item to the cart\n    let items = [...this.state.orderItems];\n    items.push(item);\n    this.setState((prevState, props) => ({\n      orderItems: items,\n      subtotal: prevState.subtotal + item.price\n    }));\n  }\n\n  removeFromCart(item) {\n\n    if(this.state.subtotal > 0) {\n      let items = [...this.state.orderItems];\n      let index = items.indexOf(item);\n      items.splice(index, 1);\n      this.setState((prevState, props) => ({\n        orderItems: items,\n        subtotal: prevState.subtotal - item.price\n      }));\n    }\n  }\n\n  submitOrder() {\n    alert(\"Thank you for your order! It has been submitted!\");\n    window.location.reload();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <Container>\n        <header>\n          <h1 className=\"place-name\">Aidan's Place</h1>\n        </header>\n        <Row>\n          <Col xs=\"12\" md=\"6\">\n            <MenuList menuItems={this.state.menuItems} addToCart={this.addToCart} removeFromCart={this.removeFromCart} />\n          </Col>\n          <Col xs=\"12\" md=\"6\">\n            <OrderForm orderItems={this.state.orderItems} subtotal={this.state.subtotal} submitOrder={this.submitOrder} />\n\n            <ContactForm />\n          </Col>\n        </Row>\n      </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}